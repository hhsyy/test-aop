部分解释使用出处：https://juejin.im/post/5a0d640c51882509e5433bf8

一、使用

    1.导入spring-boot-starter-aop包，配置yml文件，添加测试controller
    2.创建aop测试类UserAopOperator，添加@Aspect开启aop
    3.添加切入点test()方法，添加@Pointcut("execution(public * com.yiyuclub.testaop.controller..*.*(..))")表明切入位置
    4.可以添加doBefore(),doAfter()等方法，需标明@Before、@After

二、注解说明

    1.@Aspect：声明切面，标记类

    2.@Pointcut(切点表达式)：定义切点，标记方法
                            表达式组成：execution(<@注解类型模式>? <修饰符模式>? <返回类型模式> <方法名模式>(<参数模式>) <异常模式>?)

    3.@Before(切点表达式)：前置通知，切点之前执行

    4.@Around(切点表达式)：环绕通知，切点前后执行（此方法会拦截原方法的内容，需joinPoint.proceed()放行）

    5.@After(切点表达式)：后置通知，切点之后执行

    6.@AfterReturning(切点表达式)：返回通知，切点方法返回结果之后执行

    7.@AfterThrowing(切点表达式)：异常通知，切点抛出异常时执行

三、JoinPoint参数说明
    1.MethodSignature signature = (MethodSignature) joinPoint.getSignature();

    2.String name = signature.getName(); // 方法名：test

    3.Method method = signature.getMethod(); // 方法：public void com.lqr.androidaopdemo.MainActivity.test(android.view.View)

    4.Class returnType = signature.getReturnType(); // 返回值类型：void

    5.Class declaringType = signature.getDeclaringType(); // 方法所在类名：MainActivity

    6.String[] parameterNames = signature.getParameterNames(); // 参数名：view

    7.Class[] parameterTypes = signature.getParameterTypes(); // 参数类型：View


四、术语

    1.通知、增强处理（Advice）：就是你想要的功能，也就是上面说的日志、耗时计算等。

    2.连接点（JoinPoint）：允许你通知（Advice）的地方，那可就真多了，基本每个方法的前、后（两者都有也行），或抛出异常是时都可以是连接点（spring只支持方法连接点）。AspectJ还可以让你在构造器或属性注入时都行，不过一般情况下不会这么做，只要记住，和方法有关的前前后后都是连接点。

    3.切入点（Pointcut）：上面说的连接点的基础上，来定义切入点，你的一个类里，有15个方法，那就有十几个连接点了对吧，但是你并不想在所有方法附件都使用通知（使用叫织入，下面再说），你只是想让其中几个，在调用这几个方法之前、之后或者抛出异常时干点什么，那么就用切入点来定义这几个方法，让切点来筛选连接点，选中那几个你想要的方法。

    4.切面（Aspect）：切面是通知和切入点的结合。现在发现了吧，没连接点什么事，连接点就是为了让你好理解切点搞出来的，明白这个概念就行了。通知说明了干什么和什么时候干（什么时候通过before，after，around等AOP注解就能知道），而切入点说明了在哪干（指定到底是哪个方法），这就是一个完整的切面定义。

    5.织入（weaving） 把切面应用到目标对象来创建新的代理对象的过程。

五、使用注解来使用切面
    AfterReturning参数问题
    方法耗时计算的实现

